
class Point {
public:
    Point(int id, int x, int y, std::string name, std::vector<int> list) : id_(id), x_(x), y_(y), name_(name), list_(list) {};
    // Point(std::string str); do zrobienia przy wczytywania punkt√≥w od bazy danych
    Point(const Point&) = default;
    int getid() const {return id_;}
    int getx() const {return x_;}
    int gety() const {return y_;}
    std::string getname() const {return name_;}
    std::vector<int> getlist() const {return list_;}
private:
    int id_;
    int x_;
    int y_;
    std::string name_; //std::vector<std::string> do wprowadzenia wielu nazw
    std::vector<int> list_;
};



/*
testy jednostkowe google'a
TEST(PointCreateTest, NormalConstructor) {
    Point testpoint(4,34,54,"Nazwa",std::vector<int>{55,6,8});
    EXPECT_EQ(testpoint.getlist().size(),3U);
    EXPECT_EQ(testpoint.getlist()[2],8);
    EXPECT_EQ(testpoint.getid(),4);
    EXPECT_EQ(testpoint.getx(),34);
    EXPECT_EQ(testpoint.gety(),54);
    EXPECT_EQ(testpoint.getname(),"Nazwa");
}
*/
